use anyhow::Result;
use hound;
use ndarray::prelude::*;
use ort::session::{builder::GraphOptimizationLevel, Session};

fn main() -> Result<()> {
    println!("Hello, Adrien!");

    //let model_path = "yolov8m.onnx";
    let model_path = "kokoro-v0_19.onnx";
    let model = Session::builder()?
        .with_optimization_level(GraphOptimizationLevel::Level3)?
        .with_intra_threads(4)?
        .commit_from_file(model_path)?;

    // Indicate that teh model has been loaded successfully
    println!("Model {model_path} loaded successfully!");
    println!("Model: {:?}", model);

    //// Show the model inputs
    //println!("TOKENS: {:?}", TOKENS);
    //println!("STYLE: {:?}", STYLE);
    //println!("SPEED: {:?}", SPEED);

    let tokens = Array2::from_shape_vec((1, TOKENS.len()), TOKENS.to_vec())?;
    let style = Array2::from_shape_vec((1, STYLE.len()), STYLE.to_vec())?;
    let speed = Array1::from_shape_vec(1, vec![SPEED])?;

    println!("speed: {:?}", speed);
    println!("speed shape: {:?}", speed.shape());

    // Run the model
    let outputs = model.run(ort::inputs![
        "tokens" => tokens,
        "style" => style,
        "speed" => speed,
    ]?)?;

    println!("Outputs: {:?}", outputs);

    let audio = outputs["audio"].try_extract_tensor()?;

    // Print out the min, max and mean of the audio tensor
    println!("Min: {:?}", audio.iter().copied().reduce(f32::min));
    println!("Max: {:?}", audio.iter().copied().reduce(f32::max));
    println!("Mean: {:?}", audio.iter().sum::<f32>() / audio.len() as f32);

    // Create WAV file
    let spec = hound::WavSpec {
        channels: 2,
        sample_rate: 24000,
        bits_per_sample: 32,
        sample_format: hound::SampleFormat::Float,
    };

    let mut writer = hound::WavWriter::create("output.wav", spec)?;

    // Write all samples
    for &sample in audio.iter() {
        writer.write_sample(sample)?; // left channel
        writer.write_sample(sample)?; // right channel
    }
    writer.finalize()?;

    println!("Audio written to output.wav");
    Ok(())
}

const TOKENS: [i64; 40] = [
    0, 81, 83, 16, 48, 52, 156, 63, 158, 62, 131, 83, 123, 16, 102, 68, 16, 56, 156, 43, 135, 3,
    16, 58, 156, 51, 158, 62, 83, 123, 16, 43, 56, 46, 16, 65, 156, 102, 54, 0,
];

const STYLE: [f32; 256] = [
    -0.09457735,
    -0.023858791,
    -0.13582784,
    -0.14917696,
    -0.075081706,
    -0.0038632564,
    -0.08722292,
    0.010480074,
    -0.25455016,
    -0.08842721,
    -0.37923378,
    -0.029537786,
    0.06712169,
    0.06610738,
    0.055296786,
    -0.3131777,
    -0.26824096,
    -0.10302989,
    0.090630986,
    -0.060127884,
    -0.15930901,
    -0.14118831,
    0.0026986122,
    -0.016716184,
    0.25449175,
    0.03978434,
    -0.02405175,
    0.14436701,
    0.23112574,
    0.13924326,
    -0.1036304,
    -0.047339756,
    0.035138648,
    0.20868537,
    -0.07915042,
    0.13764676,
    -0.08443715,
    -0.24645975,
    0.25466737,
    0.15920506,
    0.16392818,
    0.09178947,
    -0.44322377,
    0.23833533,
    -0.24407144,
    -0.10660881,
    -0.01704466,
    -0.083695784,
    0.1867902,
    0.12649396,
    0.26553196,
    -0.33551246,
    0.13496412,
    0.2036402,
    0.14792529,
    0.17890456,
    0.2222502,
    -0.06371589,
    -0.28147262,
    0.05205387,
    0.13967326,
    -0.13951504,
    -0.35824665,
    0.15925178,
    0.16506608,
    0.12355892,
    -0.0012080928,
    0.3557294,
    0.19089243,
    0.16827278,
    -0.012486249,
    0.1396888,
    0.059779607,
    -0.09429063,
    -0.1492214,
    -0.2777593,
    -0.26788196,
    0.012426011,
    0.1695426,
    -0.042273957,
    0.2195895,
    0.084092416,
    -0.014676839,
    0.2253166,
    0.15526818,
    0.2551266,
    -0.14574833,
    0.0016978976,
    -0.13948101,
    -0.13870263,
    -0.017451061,
    -0.19427556,
    -0.15987095,
    0.11895355,
    -0.08004007,
    -0.042992674,
    -0.03437256,
    -0.18851939,
    -0.08708138,
    -0.07837571,
    -0.21504875,
    -0.03693886,
    0.2028627,
    -0.21465135,
    -0.08341573,
    0.204204,
    0.06930522,
    0.08351617,
    0.22562227,
    -0.08128057,
    -0.027384985,
    0.056565225,
    0.20844615,
    0.07356683,
    0.029771423,
    0.12244169,
    -0.28746825,
    -0.15349157,
    -0.10676451,
    -0.06292483,
    -0.030046452,
    0.11163554,
    -0.20214912,
    -0.021466644,
    -0.05050429,
    0.0030953176,
    0.021152103,
    -0.34748992,
    0.13664065,
    0.04228083,
    -0.043907635,
    0.1612573,
    -0.29832014,
    0.51849294,
    -0.038253993,
    0.1712386,
    -0.39656317,
    -0.22759728,
    -0.51868314,
    0.36124176,
    -0.12301443,
    -0.13480048,
    -0.13509044,
    -0.17283109,
    -0.1478914,
    -0.19884887,
    0.15157077,
    -0.0465826,
    -0.025403261,
    -0.2999146,
    0.019165952,
    -0.004681778,
    0.030771011,
    -0.28617316,
    -0.15972045,
    -0.32994717,
    -0.3026683,
    0.39930886,
    -0.14394183,
    0.046538364,
    -0.014934281,
    0.11144538,
    -0.3799703,
    0.06891538,
    0.12527624,
    -0.05427768,
    0.012796031,
    0.019170502,
    0.18658097,
    0.088074364,
    -0.178776,
    0.5230254,
    -0.46644816,
    -0.079663634,
    0.29564935,
    -0.26932436,
    -0.16431376,
    0.11562668,
    0.0676745,
    -0.26338503,
    -0.05748111,
    -0.13035256,
    0.3191938,
    -0.43373722,
    0.119241394,
    -0.20017219,
    -0.22148494,
    0.23881447,
    -0.03246615,
    -0.22714463,
    0.2007678,
    0.43569088,
    -0.07448649,
    0.17977141,
    0.1387007,
    0.11905684,
    -0.07662185,
    -0.034765087,
    -0.21500067,
    0.14113453,
    0.11729033,
    -0.46897522,
    -0.2839842,
    0.014343247,
    0.10336059,
    -0.23847052,
    0.2309815,
    -0.08587631,
    -0.078194246,
    0.020529155,
    0.404358,
    0.25063708,
    0.027059745,
    0.09519969,
    0.1380837,
    -0.068262056,
    -0.29314867,
    0.040962048,
    -0.19654049,
    -0.1107377,
    0.18561527,
    -0.20331994,
    -0.42250022,
    -0.17850307,
    -0.19068244,
    -0.09485334,
    -0.33927733,
    -0.14580318,
    -0.16378614,
    -0.058801126,
    0.020607755,
    0.023620654,
    -0.2669465,
    0.33577484,
    0.16523874,
    -0.23425496,
    0.10958262,
    -0.22783995,
    -0.01359537,
    0.05254086,
    -0.031195223,
    0.42260092,
    0.59876096,
    -0.06139455,
    -0.14011154,
    -0.22622538,
    -0.18398711,
    0.076291546,
    -0.0008140303,
    -0.2740545,
    -0.3570496,
    0.12014768,
    -0.22262771,
    -0.41024026,
    0.081828736,
    -0.20334919,
];

const SPEED: f32 = 1.0;
